
SPI 20.06.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000104c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  080011d4  080011d4  000111d4  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08001204  08001204  00011204  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08001208  08001208  00011208  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000000c  20000000  0800120c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
  7 .bss          00000090  2000000c  2000000c  0002000c  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  2000009c  2000009c  0002000c  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 10 .debug_info   0000ced1  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00001bc6  00000000  00000000  0002cf0d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00003266  00000000  00000000  0002ead3  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000580  00000000  00000000  00031d40  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 000008e8  00000000  00000000  000322c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00003555  00000000  00000000  00032ba8  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    000021c5  00000000  00000000  000360fd  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  000382c2  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00000e5c  00000000  00000000  00038340  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080011bc 	.word	0x080011bc

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	080011bc 	.word	0x080011bc

080001c8 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80001c8:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80001ca:	4a0e      	ldr	r2, [pc, #56]	; (8000204 <HAL_InitTick+0x3c>)
 80001cc:	4b0e      	ldr	r3, [pc, #56]	; (8000208 <HAL_InitTick+0x40>)
{
 80001ce:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80001d0:	7818      	ldrb	r0, [r3, #0]
 80001d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80001d6:	fbb3 f3f0 	udiv	r3, r3, r0
 80001da:	6810      	ldr	r0, [r2, #0]
 80001dc:	fbb0 f0f3 	udiv	r0, r0, r3
 80001e0:	f000 f8a0 	bl	8000324 <HAL_SYSTICK_Config>
 80001e4:	4604      	mov	r4, r0
 80001e6:	b958      	cbnz	r0, 8000200 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80001e8:	2d0f      	cmp	r5, #15
 80001ea:	d809      	bhi.n	8000200 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80001ec:	4602      	mov	r2, r0
 80001ee:	4629      	mov	r1, r5
 80001f0:	f04f 30ff 	mov.w	r0, #4294967295
 80001f4:	f000 f856 	bl	80002a4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80001f8:	4b04      	ldr	r3, [pc, #16]	; (800020c <HAL_InitTick+0x44>)
 80001fa:	4620      	mov	r0, r4
 80001fc:	601d      	str	r5, [r3, #0]
 80001fe:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000200:	2001      	movs	r0, #1
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
}
 8000202:	bd38      	pop	{r3, r4, r5, pc}
 8000204:	20000008 	.word	0x20000008
 8000208:	20000000 	.word	0x20000000
 800020c:	20000004 	.word	0x20000004

08000210 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000210:	4a07      	ldr	r2, [pc, #28]	; (8000230 <HAL_Init+0x20>)
{
 8000212:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000214:	6813      	ldr	r3, [r2, #0]
 8000216:	f043 0310 	orr.w	r3, r3, #16
 800021a:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800021c:	2003      	movs	r0, #3
 800021e:	f000 f82f 	bl	8000280 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000222:	2000      	movs	r0, #0
 8000224:	f7ff ffd0 	bl	80001c8 <HAL_InitTick>
  HAL_MspInit();
 8000228:	f000 fec6 	bl	8000fb8 <HAL_MspInit>
}
 800022c:	2000      	movs	r0, #0
 800022e:	bd08      	pop	{r3, pc}
 8000230:	40022000 	.word	0x40022000

08000234 <HAL_IncTick>:
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000234:	4a03      	ldr	r2, [pc, #12]	; (8000244 <HAL_IncTick+0x10>)
 8000236:	4b04      	ldr	r3, [pc, #16]	; (8000248 <HAL_IncTick+0x14>)
 8000238:	6811      	ldr	r1, [r2, #0]
 800023a:	781b      	ldrb	r3, [r3, #0]
 800023c:	440b      	add	r3, r1
 800023e:	6013      	str	r3, [r2, #0]
 8000240:	4770      	bx	lr
 8000242:	bf00      	nop
 8000244:	20000028 	.word	0x20000028
 8000248:	20000000 	.word	0x20000000

0800024c <HAL_GetTick>:
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;  
 800024c:	4b01      	ldr	r3, [pc, #4]	; (8000254 <HAL_GetTick+0x8>)
 800024e:	6818      	ldr	r0, [r3, #0]
}
 8000250:	4770      	bx	lr
 8000252:	bf00      	nop
 8000254:	20000028 	.word	0x20000028

08000258 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000258:	b538      	push	{r3, r4, r5, lr}
 800025a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800025c:	f7ff fff6 	bl	800024c <HAL_GetTick>
  uint32_t wait = Delay;
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000260:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8000262:	bf1c      	itt	ne
 8000264:	4b05      	ldrne	r3, [pc, #20]	; (800027c <HAL_Delay+0x24>)
 8000266:	781b      	ldrbne	r3, [r3, #0]
  uint32_t tickstart = HAL_GetTick();
 8000268:	4605      	mov	r5, r0
    wait += (uint32_t)(uwTickFreq);
 800026a:	bf18      	it	ne
 800026c:	18e4      	addne	r4, r4, r3
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800026e:	f7ff ffed 	bl	800024c <HAL_GetTick>
 8000272:	1b40      	subs	r0, r0, r5
 8000274:	4284      	cmp	r4, r0
 8000276:	d8fa      	bhi.n	800026e <HAL_Delay+0x16>
  {
  }
}
 8000278:	bd38      	pop	{r3, r4, r5, pc}
 800027a:	bf00      	nop
 800027c:	20000000 	.word	0x20000000

08000280 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000280:	4a07      	ldr	r2, [pc, #28]	; (80002a0 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000282:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000284:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000288:	041b      	lsls	r3, r3, #16
 800028a:	0c1b      	lsrs	r3, r3, #16
 800028c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000290:	0200      	lsls	r0, r0, #8
 8000292:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000296:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 800029a:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 800029c:	60d3      	str	r3, [r2, #12]
 800029e:	4770      	bx	lr
 80002a0:	e000ed00 	.word	0xe000ed00

080002a4 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80002a4:	4b17      	ldr	r3, [pc, #92]	; (8000304 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80002a6:	b530      	push	{r4, r5, lr}
 80002a8:	68dc      	ldr	r4, [r3, #12]
 80002aa:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80002ae:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80002b2:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80002b4:	2b04      	cmp	r3, #4
 80002b6:	bf28      	it	cs
 80002b8:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80002ba:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80002bc:	f04f 0501 	mov.w	r5, #1
 80002c0:	fa05 f303 	lsl.w	r3, r5, r3
 80002c4:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80002c8:	bf8c      	ite	hi
 80002ca:	3c03      	subhi	r4, #3
 80002cc:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80002ce:	4019      	ands	r1, r3
 80002d0:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80002d2:	fa05 f404 	lsl.w	r4, r5, r4
 80002d6:	3c01      	subs	r4, #1
 80002d8:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 80002da:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80002dc:	ea42 0201 	orr.w	r2, r2, r1
 80002e0:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002e4:	bfaf      	iteee	ge
 80002e6:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002ea:	f000 000f 	andlt.w	r0, r0, #15
 80002ee:	4b06      	ldrlt	r3, [pc, #24]	; (8000308 <HAL_NVIC_SetPriority+0x64>)
 80002f0:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002f2:	bfa5      	ittet	ge
 80002f4:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 80002f8:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002fa:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002fc:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8000300:	bd30      	pop	{r4, r5, pc}
 8000302:	bf00      	nop
 8000304:	e000ed00 	.word	0xe000ed00
 8000308:	e000ed14 	.word	0xe000ed14

0800030c <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800030c:	0942      	lsrs	r2, r0, #5
 800030e:	2301      	movs	r3, #1
 8000310:	f000 001f 	and.w	r0, r0, #31
 8000314:	fa03 f000 	lsl.w	r0, r3, r0
 8000318:	4b01      	ldr	r3, [pc, #4]	; (8000320 <HAL_NVIC_EnableIRQ+0x14>)
 800031a:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800031e:	4770      	bx	lr
 8000320:	e000e100 	.word	0xe000e100

08000324 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000324:	3801      	subs	r0, #1
 8000326:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800032a:	d20a      	bcs.n	8000342 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800032c:	4b06      	ldr	r3, [pc, #24]	; (8000348 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800032e:	4a07      	ldr	r2, [pc, #28]	; (800034c <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000330:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000332:	21f0      	movs	r1, #240	; 0xf0
 8000334:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000338:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800033a:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800033c:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800033e:	601a      	str	r2, [r3, #0]
 8000340:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000342:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000344:	4770      	bx	lr
 8000346:	bf00      	nop
 8000348:	e000e010 	.word	0xe000e010
 800034c:	e000ed00 	.word	0xe000ed00

08000350 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8000350:	4b04      	ldr	r3, [pc, #16]	; (8000364 <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000352:	681a      	ldr	r2, [r3, #0]
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8000354:	2804      	cmp	r0, #4
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000356:	bf0c      	ite	eq
 8000358:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 800035c:	f022 0204 	bicne.w	r2, r2, #4
 8000360:	601a      	str	r2, [r3, #0]
 8000362:	4770      	bx	lr
 8000364:	e000e010 	.word	0xe000e010

08000368 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8000368:	4770      	bx	lr

0800036a <HAL_SYSTICK_IRQHandler>:
{
 800036a:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 800036c:	f7ff fffc 	bl	8000368 <HAL_SYSTICK_Callback>
 8000370:	bd08      	pop	{r3, pc}

08000372 <HAL_DMA_Abort_IT>:
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
  HAL_StatusTypeDef status = HAL_OK;
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000372:	f890 2021 	ldrb.w	r2, [r0, #33]	; 0x21
 8000376:	2a02      	cmp	r2, #2
{  
 8000378:	b510      	push	{r4, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800037a:	d003      	beq.n	8000384 <HAL_DMA_Abort_IT+0x12>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800037c:	2204      	movs	r2, #4
 800037e:	6382      	str	r2, [r0, #56]	; 0x38
        
    status = HAL_ERROR;
 8000380:	2001      	movs	r0, #1
 8000382:	bd10      	pop	{r4, pc}
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000384:	6802      	ldr	r2, [r0, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000386:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000388:	6811      	ldr	r1, [r2, #0]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 800038a:	6b43      	ldr	r3, [r0, #52]	; 0x34
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800038c:	f021 010e 	bic.w	r1, r1, #14
 8000390:	6011      	str	r1, [r2, #0]
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000392:	6811      	ldr	r1, [r2, #0]
 8000394:	f021 0101 	bic.w	r1, r1, #1
 8000398:	6011      	str	r1, [r2, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800039a:	6c02      	ldr	r2, [r0, #64]	; 0x40
 800039c:	2101      	movs	r1, #1
 800039e:	fa01 f202 	lsl.w	r2, r1, r2
 80003a2:	6062      	str	r2, [r4, #4]
    __HAL_UNLOCK(hdma);
 80003a4:	2400      	movs	r4, #0
    hdma->State = HAL_DMA_STATE_READY;
 80003a6:	f880 1021 	strb.w	r1, [r0, #33]	; 0x21
    __HAL_UNLOCK(hdma);
 80003aa:	f880 4020 	strb.w	r4, [r0, #32]
    if(hdma->XferAbortCallback != NULL)
 80003ae:	b113      	cbz	r3, 80003b6 <HAL_DMA_Abort_IT+0x44>
    {
      hdma->XferAbortCallback(hdma);
 80003b0:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 80003b2:	4620      	mov	r0, r4
 80003b4:	bd10      	pop	{r4, pc}
 80003b6:	4618      	mov	r0, r3
    } 
  }
  return status;
}
 80003b8:	bd10      	pop	{r4, pc}
	...

080003bc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80003bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80003c0:	b085      	sub	sp, #20
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 80003c2:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80003c4:	f8df 8164 	ldr.w	r8, [pc, #356]	; 800052c <HAL_GPIO_Init+0x170>
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80003c8:	4a56      	ldr	r2, [pc, #344]	; (8000524 <HAL_GPIO_Init+0x168>)
  while (((GPIO_Init->Pin) >> position) != RESET)
 80003ca:	9301      	str	r3, [sp, #4]
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 80003cc:	f04f 090f 	mov.w	r9, #15
  uint32_t position = 0x00U;
 80003d0:	2300      	movs	r3, #0
  while (((GPIO_Init->Pin) >> position) != RESET)
 80003d2:	9c01      	ldr	r4, [sp, #4]
 80003d4:	40dc      	lsrs	r4, r3
 80003d6:	d102      	bne.n	80003de <HAL_GPIO_Init+0x22>
      }
    }
    
    position++;
  }
}
 80003d8:	b005      	add	sp, #20
 80003da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80003de:	2401      	movs	r4, #1
 80003e0:	fa04 fa03 	lsl.w	sl, r4, r3
    if(iocurrent)
 80003e4:	9c01      	ldr	r4, [sp, #4]
 80003e6:	ea14 050a 	ands.w	r5, r4, sl
 80003ea:	f000 8093 	beq.w	8000514 <HAL_GPIO_Init+0x158>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80003ee:	684c      	ldr	r4, [r1, #4]
 80003f0:	f024 0b10 	bic.w	fp, r4, #16
 80003f4:	f1bb 0f02 	cmp.w	fp, #2
 80003f8:	d111      	bne.n	800041e <HAL_GPIO_Init+0x62>
        temp = GPIOx->AFR[position >> 3];
 80003fa:	08df      	lsrs	r7, r3, #3
 80003fc:	eb00 0787 	add.w	r7, r0, r7, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000400:	f003 0e07 	and.w	lr, r3, #7
        temp = GPIOx->AFR[position >> 3];
 8000404:	6a3e      	ldr	r6, [r7, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000406:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 800040a:	fa09 fc0e 	lsl.w	ip, r9, lr
 800040e:	ea26 0c0c 	bic.w	ip, r6, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000412:	690e      	ldr	r6, [r1, #16]
 8000414:	fa06 f60e 	lsl.w	r6, r6, lr
 8000418:	ea46 060c 	orr.w	r6, r6, ip
        GPIOx->AFR[position >> 3] = temp;
 800041c:	623e      	str	r6, [r7, #32]
 800041e:	ea4f 0c43 	mov.w	ip, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000422:	2703      	movs	r7, #3
      temp = GPIOx->MODER;
 8000424:	6806      	ldr	r6, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000426:	fa07 f70c 	lsl.w	r7, r7, ip
 800042a:	43ff      	mvns	r7, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800042c:	f004 0e03 	and.w	lr, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000430:	403e      	ands	r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000432:	fa0e fe0c 	lsl.w	lr, lr, ip
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000436:	f10b 3bff 	add.w	fp, fp, #4294967295
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800043a:	ea4e 0606 	orr.w	r6, lr, r6
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800043e:	f1bb 0f01 	cmp.w	fp, #1
      GPIOx->MODER = temp;
 8000442:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000444:	d811      	bhi.n	800046a <HAL_GPIO_Init+0xae>
        temp = GPIOx->OSPEEDR;
 8000446:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000448:	ea06 0b07 	and.w	fp, r6, r7
        temp |= (GPIO_Init->Speed << (position * 2U));
 800044c:	68ce      	ldr	r6, [r1, #12]
 800044e:	fa06 fe0c 	lsl.w	lr, r6, ip
 8000452:	ea4e 060b 	orr.w	r6, lr, fp
        GPIOx->OSPEEDR = temp;
 8000456:	6086      	str	r6, [r0, #8]
        temp = GPIOx->OTYPER;
 8000458:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800045a:	ea26 0a0a 	bic.w	sl, r6, sl
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800045e:	f3c4 1600 	ubfx	r6, r4, #4, #1
 8000462:	409e      	lsls	r6, r3
 8000464:	ea46 060a 	orr.w	r6, r6, sl
        GPIOx->OTYPER = temp;
 8000468:	6046      	str	r6, [r0, #4]
      temp = GPIOx->PUPDR;
 800046a:	68c6      	ldr	r6, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800046c:	4037      	ands	r7, r6
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800046e:	688e      	ldr	r6, [r1, #8]
 8000470:	fa06 f60c 	lsl.w	r6, r6, ip
 8000474:	4337      	orrs	r7, r6
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000476:	00e6      	lsls	r6, r4, #3
      GPIOx->PUPDR = temp;
 8000478:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800047a:	d54b      	bpl.n	8000514 <HAL_GPIO_Init+0x158>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800047c:	f8d8 6018 	ldr.w	r6, [r8, #24]
 8000480:	f046 0601 	orr.w	r6, r6, #1
 8000484:	f8c8 6018 	str.w	r6, [r8, #24]
 8000488:	f8d8 6018 	ldr.w	r6, [r8, #24]
 800048c:	f023 0703 	bic.w	r7, r3, #3
 8000490:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8000494:	f006 0601 	and.w	r6, r6, #1
 8000498:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
 800049c:	9603      	str	r6, [sp, #12]
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 800049e:	f003 0e03 	and.w	lr, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80004a2:	9e03      	ldr	r6, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2];
 80004a4:	68be      	ldr	r6, [r7, #8]
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 80004a6:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 80004aa:	fa09 fc0e 	lsl.w	ip, r9, lr
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80004ae:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 80004b2:	ea26 0c0c 	bic.w	ip, r6, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80004b6:	d02f      	beq.n	8000518 <HAL_GPIO_Init+0x15c>
 80004b8:	4e1b      	ldr	r6, [pc, #108]	; (8000528 <HAL_GPIO_Init+0x16c>)
 80004ba:	42b0      	cmp	r0, r6
 80004bc:	d02e      	beq.n	800051c <HAL_GPIO_Init+0x160>
 80004be:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80004c2:	42b0      	cmp	r0, r6
 80004c4:	d02c      	beq.n	8000520 <HAL_GPIO_Init+0x164>
 80004c6:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80004ca:	42b0      	cmp	r0, r6
 80004cc:	bf14      	ite	ne
 80004ce:	2605      	movne	r6, #5
 80004d0:	2603      	moveq	r6, #3
 80004d2:	fa06 f60e 	lsl.w	r6, r6, lr
 80004d6:	ea46 060c 	orr.w	r6, r6, ip
        SYSCFG->EXTICR[position >> 2] = temp;
 80004da:	60be      	str	r6, [r7, #8]
        temp = EXTI->IMR;
 80004dc:	6816      	ldr	r6, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 80004de:	43ef      	mvns	r7, r5
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80004e0:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 80004e4:	bf0c      	ite	eq
 80004e6:	403e      	andeq	r6, r7
          temp |= iocurrent;
 80004e8:	432e      	orrne	r6, r5
        EXTI->IMR = temp;
 80004ea:	6016      	str	r6, [r2, #0]
        temp = EXTI->EMR;
 80004ec:	6856      	ldr	r6, [r2, #4]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80004ee:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 80004f2:	bf0c      	ite	eq
 80004f4:	403e      	andeq	r6, r7
          temp |= iocurrent;
 80004f6:	432e      	orrne	r6, r5
        EXTI->EMR = temp;
 80004f8:	6056      	str	r6, [r2, #4]
        temp = EXTI->RTSR;
 80004fa:	6896      	ldr	r6, [r2, #8]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80004fc:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 8000500:	bf0c      	ite	eq
 8000502:	403e      	andeq	r6, r7
          temp |= iocurrent;
 8000504:	432e      	orrne	r6, r5
        EXTI->RTSR = temp;
 8000506:	6096      	str	r6, [r2, #8]
        temp = EXTI->FTSR;
 8000508:	68d6      	ldr	r6, [r2, #12]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800050a:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 800050c:	bf54      	ite	pl
 800050e:	403e      	andpl	r6, r7
          temp |= iocurrent;
 8000510:	432e      	orrmi	r6, r5
        EXTI->FTSR = temp;
 8000512:	60d6      	str	r6, [r2, #12]
    position++;
 8000514:	3301      	adds	r3, #1
 8000516:	e75c      	b.n	80003d2 <HAL_GPIO_Init+0x16>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000518:	2600      	movs	r6, #0
 800051a:	e7da      	b.n	80004d2 <HAL_GPIO_Init+0x116>
 800051c:	2601      	movs	r6, #1
 800051e:	e7d8      	b.n	80004d2 <HAL_GPIO_Init+0x116>
 8000520:	2602      	movs	r6, #2
 8000522:	e7d6      	b.n	80004d2 <HAL_GPIO_Init+0x116>
 8000524:	40010400 	.word	0x40010400
 8000528:	48000400 	.word	0x48000400
 800052c:	40021000 	.word	0x40021000

08000530 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000530:	b10a      	cbz	r2, 8000536 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000532:	6181      	str	r1, [r0, #24]
 8000534:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000536:	6281      	str	r1, [r0, #40]	; 0x28
 8000538:	4770      	bx	lr
	...

0800053c <HAL_RCC_OscConfig>:
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800053c:	6803      	ldr	r3, [r0, #0]
 800053e:	07da      	lsls	r2, r3, #31
{
 8000540:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8000544:	4605      	mov	r5, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000546:	d411      	bmi.n	800056c <HAL_RCC_OscConfig+0x30>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000548:	682b      	ldr	r3, [r5, #0]
 800054a:	079b      	lsls	r3, r3, #30
 800054c:	f100 8088 	bmi.w	8000660 <HAL_RCC_OscConfig+0x124>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000550:	682b      	ldr	r3, [r5, #0]
 8000552:	071c      	lsls	r4, r3, #28
 8000554:	f100 80f8 	bmi.w	8000748 <HAL_RCC_OscConfig+0x20c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000558:	682b      	ldr	r3, [r5, #0]
 800055a:	0758      	lsls	r0, r3, #29
 800055c:	f100 8141 	bmi.w	80007e2 <HAL_RCC_OscConfig+0x2a6>
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000560:	69ea      	ldr	r2, [r5, #28]
 8000562:	2a00      	cmp	r2, #0
 8000564:	f040 81d7 	bne.w	8000916 <HAL_RCC_OscConfig+0x3da>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 8000568:	2000      	movs	r0, #0
 800056a:	e021      	b.n	80005b0 <HAL_RCC_OscConfig+0x74>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800056c:	4cba      	ldr	r4, [pc, #744]	; (8000858 <HAL_RCC_OscConfig+0x31c>)
 800056e:	6863      	ldr	r3, [r4, #4]
 8000570:	f003 030c 	and.w	r3, r3, #12
 8000574:	2b04      	cmp	r3, #4
 8000576:	d007      	beq.n	8000588 <HAL_RCC_OscConfig+0x4c>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000578:	6863      	ldr	r3, [r4, #4]
 800057a:	f003 030c 	and.w	r3, r3, #12
 800057e:	2b08      	cmp	r3, #8
 8000580:	d119      	bne.n	80005b6 <HAL_RCC_OscConfig+0x7a>
 8000582:	6863      	ldr	r3, [r4, #4]
 8000584:	03df      	lsls	r7, r3, #15
 8000586:	d516      	bpl.n	80005b6 <HAL_RCC_OscConfig+0x7a>
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000588:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800058c:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000590:	6821      	ldr	r1, [r4, #0]
 8000592:	fa93 f3a3 	rbit	r3, r3
 8000596:	fab3 f383 	clz	r3, r3
 800059a:	f003 031f 	and.w	r3, r3, #31
 800059e:	2201      	movs	r2, #1
 80005a0:	fa02 f303 	lsl.w	r3, r2, r3
 80005a4:	420b      	tst	r3, r1
 80005a6:	d0cf      	beq.n	8000548 <HAL_RCC_OscConfig+0xc>
 80005a8:	686b      	ldr	r3, [r5, #4]
 80005aa:	2b00      	cmp	r3, #0
 80005ac:	d1cc      	bne.n	8000548 <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 80005ae:	2001      	movs	r0, #1
}
 80005b0:	b002      	add	sp, #8
 80005b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80005b6:	686a      	ldr	r2, [r5, #4]
 80005b8:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 80005bc:	d125      	bne.n	800060a <HAL_RCC_OscConfig+0xce>
 80005be:	6823      	ldr	r3, [r4, #0]
 80005c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80005c4:	6023      	str	r3, [r4, #0]
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80005c6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80005c8:	68a9      	ldr	r1, [r5, #8]
 80005ca:	f023 030f 	bic.w	r3, r3, #15
 80005ce:	430b      	orrs	r3, r1
 80005d0:	62e3      	str	r3, [r4, #44]	; 0x2c
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80005d2:	b352      	cbz	r2, 800062a <HAL_RCC_OscConfig+0xee>
        tickstart = HAL_GetTick();
 80005d4:	f7ff fe3a 	bl	800024c <HAL_GetTick>
 80005d8:	f44f 3600 	mov.w	r6, #131072	; 0x20000
 80005dc:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80005de:	2701      	movs	r7, #1
 80005e0:	fa96 f3a6 	rbit	r3, r6
 80005e4:	6822      	ldr	r2, [r4, #0]
 80005e6:	fa96 f3a6 	rbit	r3, r6
 80005ea:	fab3 f383 	clz	r3, r3
 80005ee:	f003 031f 	and.w	r3, r3, #31
 80005f2:	fa07 f303 	lsl.w	r3, r7, r3
 80005f6:	4213      	tst	r3, r2
 80005f8:	d1a6      	bne.n	8000548 <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80005fa:	f7ff fe27 	bl	800024c <HAL_GetTick>
 80005fe:	eba0 0008 	sub.w	r0, r0, r8
 8000602:	2864      	cmp	r0, #100	; 0x64
 8000604:	d9ec      	bls.n	80005e0 <HAL_RCC_OscConfig+0xa4>
            return HAL_TIMEOUT;
 8000606:	2003      	movs	r0, #3
 8000608:	e7d2      	b.n	80005b0 <HAL_RCC_OscConfig+0x74>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800060a:	6823      	ldr	r3, [r4, #0]
 800060c:	b932      	cbnz	r2, 800061c <HAL_RCC_OscConfig+0xe0>
 800060e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000612:	6023      	str	r3, [r4, #0]
 8000614:	6823      	ldr	r3, [r4, #0]
 8000616:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800061a:	e7d3      	b.n	80005c4 <HAL_RCC_OscConfig+0x88>
 800061c:	f5b2 2fa0 	cmp.w	r2, #327680	; 0x50000
 8000620:	d1f5      	bne.n	800060e <HAL_RCC_OscConfig+0xd2>
 8000622:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000626:	6023      	str	r3, [r4, #0]
 8000628:	e7c9      	b.n	80005be <HAL_RCC_OscConfig+0x82>
        tickstart = HAL_GetTick();
 800062a:	f7ff fe0f 	bl	800024c <HAL_GetTick>
 800062e:	f44f 3600 	mov.w	r6, #131072	; 0x20000
 8000632:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000634:	2701      	movs	r7, #1
 8000636:	fa96 f3a6 	rbit	r3, r6
 800063a:	6822      	ldr	r2, [r4, #0]
 800063c:	fa96 f3a6 	rbit	r3, r6
 8000640:	fab3 f383 	clz	r3, r3
 8000644:	f003 031f 	and.w	r3, r3, #31
 8000648:	fa07 f303 	lsl.w	r3, r7, r3
 800064c:	4213      	tst	r3, r2
 800064e:	f43f af7b 	beq.w	8000548 <HAL_RCC_OscConfig+0xc>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000652:	f7ff fdfb 	bl	800024c <HAL_GetTick>
 8000656:	eba0 0008 	sub.w	r0, r0, r8
 800065a:	2864      	cmp	r0, #100	; 0x64
 800065c:	d9eb      	bls.n	8000636 <HAL_RCC_OscConfig+0xfa>
 800065e:	e7d2      	b.n	8000606 <HAL_RCC_OscConfig+0xca>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000660:	4c7d      	ldr	r4, [pc, #500]	; (8000858 <HAL_RCC_OscConfig+0x31c>)
 8000662:	6863      	ldr	r3, [r4, #4]
 8000664:	f013 0f0c 	tst.w	r3, #12
 8000668:	d007      	beq.n	800067a <HAL_RCC_OscConfig+0x13e>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800066a:	6863      	ldr	r3, [r4, #4]
 800066c:	f003 030c 	and.w	r3, r3, #12
 8000670:	2b08      	cmp	r3, #8
 8000672:	d121      	bne.n	80006b8 <HAL_RCC_OscConfig+0x17c>
 8000674:	6863      	ldr	r3, [r4, #4]
 8000676:	03de      	lsls	r6, r3, #15
 8000678:	d41e      	bmi.n	80006b8 <HAL_RCC_OscConfig+0x17c>
 800067a:	2302      	movs	r3, #2
 800067c:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000680:	6821      	ldr	r1, [r4, #0]
 8000682:	fa93 f3a3 	rbit	r3, r3
 8000686:	fab3 f383 	clz	r3, r3
 800068a:	f003 031f 	and.w	r3, r3, #31
 800068e:	2201      	movs	r2, #1
 8000690:	fa02 f303 	lsl.w	r3, r2, r3
 8000694:	420b      	tst	r3, r1
 8000696:	d002      	beq.n	800069e <HAL_RCC_OscConfig+0x162>
 8000698:	692b      	ldr	r3, [r5, #16]
 800069a:	4293      	cmp	r3, r2
 800069c:	d187      	bne.n	80005ae <HAL_RCC_OscConfig+0x72>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800069e:	6821      	ldr	r1, [r4, #0]
 80006a0:	23f8      	movs	r3, #248	; 0xf8
 80006a2:	fa93 f3a3 	rbit	r3, r3
 80006a6:	fab3 f283 	clz	r2, r3
 80006aa:	696b      	ldr	r3, [r5, #20]
 80006ac:	4093      	lsls	r3, r2
 80006ae:	f021 02f8 	bic.w	r2, r1, #248	; 0xf8
 80006b2:	4313      	orrs	r3, r2
 80006b4:	6023      	str	r3, [r4, #0]
 80006b6:	e74b      	b.n	8000550 <HAL_RCC_OscConfig+0x14>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80006b8:	692a      	ldr	r2, [r5, #16]
 80006ba:	2601      	movs	r6, #1
 80006bc:	b30a      	cbz	r2, 8000702 <HAL_RCC_OscConfig+0x1c6>
 80006be:	fa96 f3a6 	rbit	r3, r6
        __HAL_RCC_HSI_ENABLE();
 80006c2:	fab3 f383 	clz	r3, r3
 80006c6:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80006ca:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80006ce:	009b      	lsls	r3, r3, #2
 80006d0:	2702      	movs	r7, #2
 80006d2:	601e      	str	r6, [r3, #0]
        tickstart = HAL_GetTick();
 80006d4:	f7ff fdba 	bl	800024c <HAL_GetTick>
 80006d8:	4680      	mov	r8, r0
 80006da:	fa97 f3a7 	rbit	r3, r7
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80006de:	6822      	ldr	r2, [r4, #0]
 80006e0:	fa97 f3a7 	rbit	r3, r7
 80006e4:	fab3 f383 	clz	r3, r3
 80006e8:	f003 031f 	and.w	r3, r3, #31
 80006ec:	fa06 f303 	lsl.w	r3, r6, r3
 80006f0:	4213      	tst	r3, r2
 80006f2:	d1d4      	bne.n	800069e <HAL_RCC_OscConfig+0x162>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80006f4:	f7ff fdaa 	bl	800024c <HAL_GetTick>
 80006f8:	eba0 0008 	sub.w	r0, r0, r8
 80006fc:	2802      	cmp	r0, #2
 80006fe:	d9ec      	bls.n	80006da <HAL_RCC_OscConfig+0x19e>
 8000700:	e781      	b.n	8000606 <HAL_RCC_OscConfig+0xca>
 8000702:	fa96 f3a6 	rbit	r3, r6
        __HAL_RCC_HSI_DISABLE();
 8000706:	fab3 f383 	clz	r3, r3
 800070a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800070e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000712:	009b      	lsls	r3, r3, #2
 8000714:	2702      	movs	r7, #2
 8000716:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000718:	f7ff fd98 	bl	800024c <HAL_GetTick>
 800071c:	4680      	mov	r8, r0
 800071e:	fa97 f3a7 	rbit	r3, r7
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000722:	6822      	ldr	r2, [r4, #0]
 8000724:	fa97 f3a7 	rbit	r3, r7
 8000728:	fab3 f383 	clz	r3, r3
 800072c:	f003 031f 	and.w	r3, r3, #31
 8000730:	fa06 f303 	lsl.w	r3, r6, r3
 8000734:	4213      	tst	r3, r2
 8000736:	f43f af0b 	beq.w	8000550 <HAL_RCC_OscConfig+0x14>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800073a:	f7ff fd87 	bl	800024c <HAL_GetTick>
 800073e:	eba0 0008 	sub.w	r0, r0, r8
 8000742:	2802      	cmp	r0, #2
 8000744:	d9eb      	bls.n	800071e <HAL_RCC_OscConfig+0x1e2>
 8000746:	e75e      	b.n	8000606 <HAL_RCC_OscConfig+0xca>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000748:	69aa      	ldr	r2, [r5, #24]
 800074a:	4e43      	ldr	r6, [pc, #268]	; (8000858 <HAL_RCC_OscConfig+0x31c>)
 800074c:	4943      	ldr	r1, [pc, #268]	; (800085c <HAL_RCC_OscConfig+0x320>)
 800074e:	2401      	movs	r4, #1
 8000750:	b31a      	cbz	r2, 800079a <HAL_RCC_OscConfig+0x25e>
 8000752:	fa94 f3a4 	rbit	r3, r4
      __HAL_RCC_LSI_ENABLE();
 8000756:	fab3 f383 	clz	r3, r3
 800075a:	440b      	add	r3, r1
 800075c:	009b      	lsls	r3, r3, #2
 800075e:	2702      	movs	r7, #2
 8000760:	601c      	str	r4, [r3, #0]
      tickstart = HAL_GetTick();
 8000762:	f7ff fd73 	bl	800024c <HAL_GetTick>
 8000766:	4680      	mov	r8, r0
 8000768:	fa97 f3a7 	rbit	r3, r7
 800076c:	fa97 f3a7 	rbit	r3, r7
 8000770:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000774:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8000776:	fa97 f3a7 	rbit	r3, r7
 800077a:	fab3 f383 	clz	r3, r3
 800077e:	f003 031f 	and.w	r3, r3, #31
 8000782:	fa04 f303 	lsl.w	r3, r4, r3
 8000786:	4213      	tst	r3, r2
 8000788:	f47f aee6 	bne.w	8000558 <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800078c:	f7ff fd5e 	bl	800024c <HAL_GetTick>
 8000790:	eba0 0008 	sub.w	r0, r0, r8
 8000794:	2802      	cmp	r0, #2
 8000796:	d9e7      	bls.n	8000768 <HAL_RCC_OscConfig+0x22c>
 8000798:	e735      	b.n	8000606 <HAL_RCC_OscConfig+0xca>
 800079a:	fa94 f3a4 	rbit	r3, r4
      __HAL_RCC_LSI_DISABLE();
 800079e:	fab3 f383 	clz	r3, r3
 80007a2:	440b      	add	r3, r1
 80007a4:	009b      	lsls	r3, r3, #2
 80007a6:	2702      	movs	r7, #2
 80007a8:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80007aa:	f7ff fd4f 	bl	800024c <HAL_GetTick>
 80007ae:	4680      	mov	r8, r0
 80007b0:	fa97 f3a7 	rbit	r3, r7
 80007b4:	fa97 f3a7 	rbit	r3, r7
 80007b8:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80007bc:	6a72      	ldr	r2, [r6, #36]	; 0x24
 80007be:	fa97 f3a7 	rbit	r3, r7
 80007c2:	fab3 f383 	clz	r3, r3
 80007c6:	f003 031f 	and.w	r3, r3, #31
 80007ca:	fa04 f303 	lsl.w	r3, r4, r3
 80007ce:	4213      	tst	r3, r2
 80007d0:	f43f aec2 	beq.w	8000558 <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80007d4:	f7ff fd3a 	bl	800024c <HAL_GetTick>
 80007d8:	eba0 0008 	sub.w	r0, r0, r8
 80007dc:	2802      	cmp	r0, #2
 80007de:	d9e7      	bls.n	80007b0 <HAL_RCC_OscConfig+0x274>
 80007e0:	e711      	b.n	8000606 <HAL_RCC_OscConfig+0xca>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80007e2:	4c1d      	ldr	r4, [pc, #116]	; (8000858 <HAL_RCC_OscConfig+0x31c>)
 80007e4:	69e3      	ldr	r3, [r4, #28]
 80007e6:	00d9      	lsls	r1, r3, #3
 80007e8:	d434      	bmi.n	8000854 <HAL_RCC_OscConfig+0x318>
      __HAL_RCC_PWR_CLK_ENABLE();
 80007ea:	69e3      	ldr	r3, [r4, #28]
 80007ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007f0:	61e3      	str	r3, [r4, #28]
 80007f2:	69e3      	ldr	r3, [r4, #28]
 80007f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007f8:	9301      	str	r3, [sp, #4]
 80007fa:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80007fc:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80007fe:	4f18      	ldr	r7, [pc, #96]	; (8000860 <HAL_RCC_OscConfig+0x324>)
 8000800:	683b      	ldr	r3, [r7, #0]
 8000802:	05da      	lsls	r2, r3, #23
 8000804:	d52e      	bpl.n	8000864 <HAL_RCC_OscConfig+0x328>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000806:	68eb      	ldr	r3, [r5, #12]
 8000808:	2b01      	cmp	r3, #1
 800080a:	d13c      	bne.n	8000886 <HAL_RCC_OscConfig+0x34a>
 800080c:	6a23      	ldr	r3, [r4, #32]
 800080e:	f043 0301 	orr.w	r3, r3, #1
 8000812:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8000814:	f7ff fd1a 	bl	800024c <HAL_GetTick>
 8000818:	2702      	movs	r7, #2
 800081a:	4682      	mov	sl, r0
 800081c:	46b9      	mov	r9, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800081e:	f04f 0801 	mov.w	r8, #1
 8000822:	fa97 f3a7 	rbit	r3, r7
 8000826:	fa97 f3a7 	rbit	r3, r7
 800082a:	2b00      	cmp	r3, #0
 800082c:	d06b      	beq.n	8000906 <HAL_RCC_OscConfig+0x3ca>
 800082e:	6a22      	ldr	r2, [r4, #32]
 8000830:	fa99 f3a9 	rbit	r3, r9
 8000834:	fab3 f383 	clz	r3, r3
 8000838:	f003 031f 	and.w	r3, r3, #31
 800083c:	fa08 f303 	lsl.w	r3, r8, r3
 8000840:	4213      	tst	r3, r2
 8000842:	d057      	beq.n	80008f4 <HAL_RCC_OscConfig+0x3b8>
    if(pwrclkchanged == SET)
 8000844:	2e00      	cmp	r6, #0
 8000846:	f43f ae8b 	beq.w	8000560 <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 800084a:	69e3      	ldr	r3, [r4, #28]
 800084c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000850:	61e3      	str	r3, [r4, #28]
 8000852:	e685      	b.n	8000560 <HAL_RCC_OscConfig+0x24>
    FlagStatus       pwrclkchanged = RESET;
 8000854:	2600      	movs	r6, #0
 8000856:	e7d2      	b.n	80007fe <HAL_RCC_OscConfig+0x2c2>
 8000858:	40021000 	.word	0x40021000
 800085c:	10908120 	.word	0x10908120
 8000860:	40007000 	.word	0x40007000
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000864:	683b      	ldr	r3, [r7, #0]
 8000866:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800086a:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 800086c:	f7ff fcee 	bl	800024c <HAL_GetTick>
 8000870:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000872:	683b      	ldr	r3, [r7, #0]
 8000874:	05db      	lsls	r3, r3, #23
 8000876:	d4c6      	bmi.n	8000806 <HAL_RCC_OscConfig+0x2ca>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000878:	f7ff fce8 	bl	800024c <HAL_GetTick>
 800087c:	eba0 0008 	sub.w	r0, r0, r8
 8000880:	2864      	cmp	r0, #100	; 0x64
 8000882:	d9f6      	bls.n	8000872 <HAL_RCC_OscConfig+0x336>
 8000884:	e6bf      	b.n	8000606 <HAL_RCC_OscConfig+0xca>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000886:	bb3b      	cbnz	r3, 80008d8 <HAL_RCC_OscConfig+0x39c>
 8000888:	6a23      	ldr	r3, [r4, #32]
 800088a:	f023 0301 	bic.w	r3, r3, #1
 800088e:	6223      	str	r3, [r4, #32]
 8000890:	6a23      	ldr	r3, [r4, #32]
 8000892:	f023 0304 	bic.w	r3, r3, #4
 8000896:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8000898:	f7ff fcd8 	bl	800024c <HAL_GetTick>
 800089c:	2702      	movs	r7, #2
 800089e:	4682      	mov	sl, r0
 80008a0:	46b9      	mov	r9, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80008a2:	f04f 0801 	mov.w	r8, #1
 80008a6:	fa97 f3a7 	rbit	r3, r7
 80008aa:	fa97 f3a7 	rbit	r3, r7
 80008ae:	b373      	cbz	r3, 800090e <HAL_RCC_OscConfig+0x3d2>
 80008b0:	6a22      	ldr	r2, [r4, #32]
 80008b2:	fa99 f3a9 	rbit	r3, r9
 80008b6:	fab3 f383 	clz	r3, r3
 80008ba:	f003 031f 	and.w	r3, r3, #31
 80008be:	fa08 f303 	lsl.w	r3, r8, r3
 80008c2:	4213      	tst	r3, r2
 80008c4:	d0be      	beq.n	8000844 <HAL_RCC_OscConfig+0x308>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80008c6:	f7ff fcc1 	bl	800024c <HAL_GetTick>
 80008ca:	f241 3388 	movw	r3, #5000	; 0x1388
 80008ce:	eba0 000a 	sub.w	r0, r0, sl
 80008d2:	4298      	cmp	r0, r3
 80008d4:	d9e7      	bls.n	80008a6 <HAL_RCC_OscConfig+0x36a>
 80008d6:	e696      	b.n	8000606 <HAL_RCC_OscConfig+0xca>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80008d8:	2b05      	cmp	r3, #5
 80008da:	6a23      	ldr	r3, [r4, #32]
 80008dc:	d103      	bne.n	80008e6 <HAL_RCC_OscConfig+0x3aa>
 80008de:	f043 0304 	orr.w	r3, r3, #4
 80008e2:	6223      	str	r3, [r4, #32]
 80008e4:	e792      	b.n	800080c <HAL_RCC_OscConfig+0x2d0>
 80008e6:	f023 0301 	bic.w	r3, r3, #1
 80008ea:	6223      	str	r3, [r4, #32]
 80008ec:	6a23      	ldr	r3, [r4, #32]
 80008ee:	f023 0304 	bic.w	r3, r3, #4
 80008f2:	e78e      	b.n	8000812 <HAL_RCC_OscConfig+0x2d6>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80008f4:	f7ff fcaa 	bl	800024c <HAL_GetTick>
 80008f8:	f241 3388 	movw	r3, #5000	; 0x1388
 80008fc:	eba0 000a 	sub.w	r0, r0, sl
 8000900:	4298      	cmp	r0, r3
 8000902:	d98e      	bls.n	8000822 <HAL_RCC_OscConfig+0x2e6>
 8000904:	e67f      	b.n	8000606 <HAL_RCC_OscConfig+0xca>
 8000906:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800090a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800090c:	e790      	b.n	8000830 <HAL_RCC_OscConfig+0x2f4>
 800090e:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000912:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000914:	e7cd      	b.n	80008b2 <HAL_RCC_OscConfig+0x376>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000916:	4c41      	ldr	r4, [pc, #260]	; (8000a1c <HAL_RCC_OscConfig+0x4e0>)
 8000918:	6863      	ldr	r3, [r4, #4]
 800091a:	f003 030c 	and.w	r3, r3, #12
 800091e:	2b08      	cmp	r3, #8
 8000920:	f43f ae45 	beq.w	80005ae <HAL_RCC_OscConfig+0x72>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000924:	2a02      	cmp	r2, #2
 8000926:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800092a:	d152      	bne.n	80009d2 <HAL_RCC_OscConfig+0x496>
 800092c:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 8000930:	fab3 f383 	clz	r3, r3
 8000934:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000938:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800093c:	009b      	lsls	r3, r3, #2
 800093e:	2200      	movs	r2, #0
 8000940:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000942:	f7ff fc83 	bl	800024c <HAL_GetTick>
 8000946:	f04f 7700 	mov.w	r7, #33554432	; 0x2000000
 800094a:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800094c:	2601      	movs	r6, #1
 800094e:	fa97 f3a7 	rbit	r3, r7
 8000952:	6822      	ldr	r2, [r4, #0]
 8000954:	fa97 f3a7 	rbit	r3, r7
 8000958:	fab3 f383 	clz	r3, r3
 800095c:	f003 031f 	and.w	r3, r3, #31
 8000960:	fa06 f303 	lsl.w	r3, r6, r3
 8000964:	4213      	tst	r3, r2
 8000966:	d12d      	bne.n	80009c4 <HAL_RCC_OscConfig+0x488>
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000968:	6862      	ldr	r2, [r4, #4]
 800096a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800096c:	6a29      	ldr	r1, [r5, #32]
 800096e:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 8000972:	430b      	orrs	r3, r1
 8000974:	4313      	orrs	r3, r2
 8000976:	6063      	str	r3, [r4, #4]
 8000978:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800097c:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_ENABLE();
 8000980:	fab3 f383 	clz	r3, r3
 8000984:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000988:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800098c:	009b      	lsls	r3, r3, #2
 800098e:	f04f 7500 	mov.w	r5, #33554432	; 0x2000000
 8000992:	601e      	str	r6, [r3, #0]
        tickstart = HAL_GetTick();
 8000994:	f7ff fc5a 	bl	800024c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000998:	2601      	movs	r6, #1
        tickstart = HAL_GetTick();
 800099a:	4607      	mov	r7, r0
 800099c:	fa95 f3a5 	rbit	r3, r5
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80009a0:	6822      	ldr	r2, [r4, #0]
 80009a2:	fa95 f3a5 	rbit	r3, r5
 80009a6:	fab3 f383 	clz	r3, r3
 80009aa:	f003 031f 	and.w	r3, r3, #31
 80009ae:	fa06 f303 	lsl.w	r3, r6, r3
 80009b2:	4213      	tst	r3, r2
 80009b4:	f47f add8 	bne.w	8000568 <HAL_RCC_OscConfig+0x2c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80009b8:	f7ff fc48 	bl	800024c <HAL_GetTick>
 80009bc:	1bc0      	subs	r0, r0, r7
 80009be:	2802      	cmp	r0, #2
 80009c0:	d9ec      	bls.n	800099c <HAL_RCC_OscConfig+0x460>
 80009c2:	e620      	b.n	8000606 <HAL_RCC_OscConfig+0xca>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80009c4:	f7ff fc42 	bl	800024c <HAL_GetTick>
 80009c8:	eba0 0008 	sub.w	r0, r0, r8
 80009cc:	2802      	cmp	r0, #2
 80009ce:	d9be      	bls.n	800094e <HAL_RCC_OscConfig+0x412>
 80009d0:	e619      	b.n	8000606 <HAL_RCC_OscConfig+0xca>
 80009d2:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 80009d6:	fab3 f383 	clz	r3, r3
 80009da:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80009de:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80009e2:	009b      	lsls	r3, r3, #2
 80009e4:	2200      	movs	r2, #0
 80009e6:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80009e8:	f7ff fc30 	bl	800024c <HAL_GetTick>
 80009ec:	f04f 7500 	mov.w	r5, #33554432	; 0x2000000
 80009f0:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80009f2:	2601      	movs	r6, #1
 80009f4:	fa95 f3a5 	rbit	r3, r5
 80009f8:	6822      	ldr	r2, [r4, #0]
 80009fa:	fa95 f3a5 	rbit	r3, r5
 80009fe:	fab3 f383 	clz	r3, r3
 8000a02:	f003 031f 	and.w	r3, r3, #31
 8000a06:	fa06 f303 	lsl.w	r3, r6, r3
 8000a0a:	4213      	tst	r3, r2
 8000a0c:	f43f adac 	beq.w	8000568 <HAL_RCC_OscConfig+0x2c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000a10:	f7ff fc1c 	bl	800024c <HAL_GetTick>
 8000a14:	1bc0      	subs	r0, r0, r7
 8000a16:	2802      	cmp	r0, #2
 8000a18:	d9ec      	bls.n	80009f4 <HAL_RCC_OscConfig+0x4b8>
 8000a1a:	e5f4      	b.n	8000606 <HAL_RCC_OscConfig+0xca>
 8000a1c:	40021000 	.word	0x40021000

08000a20 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8000a20:	b510      	push	{r4, lr}
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
 8000a22:	4c13      	ldr	r4, [pc, #76]	; (8000a70 <HAL_RCC_GetSysClockFreq+0x50>)
 8000a24:	6861      	ldr	r1, [r4, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8000a26:	f001 030c 	and.w	r3, r1, #12
 8000a2a:	2b08      	cmp	r3, #8
 8000a2c:	d11e      	bne.n	8000a6c <HAL_RCC_GetSysClockFreq+0x4c>
 8000a2e:	f44f 1370 	mov.w	r3, #3932160	; 0x3c0000
 8000a32:	fa93 f3a3 	rbit	r3, r3
      sysclockfreq = HSE_VALUE;
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8000a36:	f401 1270 	and.w	r2, r1, #3932160	; 0x3c0000
 8000a3a:	fab3 f383 	clz	r3, r3
 8000a3e:	fa22 f303 	lsr.w	r3, r2, r3
 8000a42:	4a0c      	ldr	r2, [pc, #48]	; (8000a74 <HAL_RCC_GetSysClockFreq+0x54>)
 8000a44:	5cd0      	ldrb	r0, [r2, r3]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8000a46:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000a48:	220f      	movs	r2, #15
 8000a4a:	fa92 f2a2 	rbit	r2, r2
 8000a4e:	fab2 f282 	clz	r2, r2
 8000a52:	f003 030f 	and.w	r3, r3, #15
 8000a56:	40d3      	lsrs	r3, r2
 8000a58:	4a07      	ldr	r2, [pc, #28]	; (8000a78 <HAL_RCC_GetSysClockFreq+0x58>)
 8000a5a:	5cd2      	ldrb	r2, [r2, r3]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8000a5c:	03cb      	lsls	r3, r1, #15
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (HSE_VALUE / prediv) * pllmul;
 8000a5e:	bf4a      	itet	mi
 8000a60:	4b06      	ldrmi	r3, [pc, #24]	; (8000a7c <HAL_RCC_GetSysClockFreq+0x5c>)
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (HSI_VALUE >> 1U) * pllmul;
 8000a62:	4b07      	ldrpl	r3, [pc, #28]	; (8000a80 <HAL_RCC_GetSysClockFreq+0x60>)
        pllclk = (HSE_VALUE / prediv) * pllmul;
 8000a64:	fbb3 f3f2 	udivmi	r3, r3, r2
        pllclk = (HSI_VALUE >> 1U) * pllmul;
 8000a68:	4358      	muls	r0, r3
 8000a6a:	bd10      	pop	{r4, pc}
      sysclockfreq = HSE_VALUE;
 8000a6c:	4803      	ldr	r0, [pc, #12]	; (8000a7c <HAL_RCC_GetSysClockFreq+0x5c>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8000a6e:	bd10      	pop	{r4, pc}
 8000a70:	40021000 	.word	0x40021000
 8000a74:	080011d4 	.word	0x080011d4
 8000a78:	080011e4 	.word	0x080011e4
 8000a7c:	007a1200 	.word	0x007a1200
 8000a80:	003d0900 	.word	0x003d0900

08000a84 <HAL_RCC_ClockConfig>:
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000a84:	4a5c      	ldr	r2, [pc, #368]	; (8000bf8 <HAL_RCC_ClockConfig+0x174>)
 8000a86:	6813      	ldr	r3, [r2, #0]
 8000a88:	f003 0307 	and.w	r3, r3, #7
 8000a8c:	428b      	cmp	r3, r1
{
 8000a8e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000a92:	4606      	mov	r6, r0
 8000a94:	460d      	mov	r5, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000a96:	d330      	bcc.n	8000afa <HAL_RCC_ClockConfig+0x76>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000a98:	6832      	ldr	r2, [r6, #0]
 8000a9a:	0791      	lsls	r1, r2, #30
 8000a9c:	d43a      	bmi.n	8000b14 <HAL_RCC_ClockConfig+0x90>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000a9e:	07d2      	lsls	r2, r2, #31
 8000aa0:	d440      	bmi.n	8000b24 <HAL_RCC_ClockConfig+0xa0>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8000aa2:	4a55      	ldr	r2, [pc, #340]	; (8000bf8 <HAL_RCC_ClockConfig+0x174>)
 8000aa4:	6813      	ldr	r3, [r2, #0]
 8000aa6:	f003 0307 	and.w	r3, r3, #7
 8000aaa:	429d      	cmp	r5, r3
 8000aac:	f0c0 8092 	bcc.w	8000bd4 <HAL_RCC_ClockConfig+0x150>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000ab0:	6832      	ldr	r2, [r6, #0]
 8000ab2:	4c52      	ldr	r4, [pc, #328]	; (8000bfc <HAL_RCC_ClockConfig+0x178>)
 8000ab4:	f012 0f04 	tst.w	r2, #4
 8000ab8:	f040 8097 	bne.w	8000bea <HAL_RCC_ClockConfig+0x166>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000abc:	0713      	lsls	r3, r2, #28
 8000abe:	d506      	bpl.n	8000ace <HAL_RCC_ClockConfig+0x4a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8000ac0:	6863      	ldr	r3, [r4, #4]
 8000ac2:	6932      	ldr	r2, [r6, #16]
 8000ac4:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8000ac8:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000acc:	6063      	str	r3, [r4, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8000ace:	f7ff ffa7 	bl	8000a20 <HAL_RCC_GetSysClockFreq>
 8000ad2:	6863      	ldr	r3, [r4, #4]
 8000ad4:	22f0      	movs	r2, #240	; 0xf0
 8000ad6:	fa92 f2a2 	rbit	r2, r2
 8000ada:	fab2 f282 	clz	r2, r2
 8000ade:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000ae2:	40d3      	lsrs	r3, r2
 8000ae4:	4a46      	ldr	r2, [pc, #280]	; (8000c00 <HAL_RCC_ClockConfig+0x17c>)
 8000ae6:	5cd3      	ldrb	r3, [r2, r3]
 8000ae8:	40d8      	lsrs	r0, r3
 8000aea:	4b46      	ldr	r3, [pc, #280]	; (8000c04 <HAL_RCC_ClockConfig+0x180>)
 8000aec:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8000aee:	2000      	movs	r0, #0
 8000af0:	f7ff fb6a 	bl	80001c8 <HAL_InitTick>
  return HAL_OK;
 8000af4:	2000      	movs	r0, #0
}
 8000af6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000afa:	6813      	ldr	r3, [r2, #0]
 8000afc:	f023 0307 	bic.w	r3, r3, #7
 8000b00:	430b      	orrs	r3, r1
 8000b02:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000b04:	6813      	ldr	r3, [r2, #0]
 8000b06:	f003 0307 	and.w	r3, r3, #7
 8000b0a:	4299      	cmp	r1, r3
 8000b0c:	d0c4      	beq.n	8000a98 <HAL_RCC_ClockConfig+0x14>
      return HAL_ERROR;
 8000b0e:	2001      	movs	r0, #1
 8000b10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000b14:	4939      	ldr	r1, [pc, #228]	; (8000bfc <HAL_RCC_ClockConfig+0x178>)
 8000b16:	68b0      	ldr	r0, [r6, #8]
 8000b18:	684b      	ldr	r3, [r1, #4]
 8000b1a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000b1e:	4303      	orrs	r3, r0
 8000b20:	604b      	str	r3, [r1, #4]
 8000b22:	e7bc      	b.n	8000a9e <HAL_RCC_ClockConfig+0x1a>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000b24:	6872      	ldr	r2, [r6, #4]
 8000b26:	4c35      	ldr	r4, [pc, #212]	; (8000bfc <HAL_RCC_ClockConfig+0x178>)
 8000b28:	2a01      	cmp	r2, #1
 8000b2a:	d128      	bne.n	8000b7e <HAL_RCC_ClockConfig+0xfa>
 8000b2c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000b30:	fa93 f1a3 	rbit	r1, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000b34:	6821      	ldr	r1, [r4, #0]
 8000b36:	fa93 f3a3 	rbit	r3, r3
 8000b3a:	fab3 f383 	clz	r3, r3
 8000b3e:	f003 031f 	and.w	r3, r3, #31
 8000b42:	fa02 f303 	lsl.w	r3, r2, r3
 8000b46:	420b      	tst	r3, r1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000b48:	d0e1      	beq.n	8000b0e <HAL_RCC_ClockConfig+0x8a>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000b4a:	6863      	ldr	r3, [r4, #4]
 8000b4c:	f023 0303 	bic.w	r3, r3, #3
 8000b50:	431a      	orrs	r2, r3
 8000b52:	6062      	str	r2, [r4, #4]
    tickstart = HAL_GetTick();
 8000b54:	f7ff fb7a 	bl	800024c <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000b58:	6873      	ldr	r3, [r6, #4]
 8000b5a:	2b01      	cmp	r3, #1
    tickstart = HAL_GetTick();
 8000b5c:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000b5e:	f241 3888 	movw	r8, #5000	; 0x1388
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000b62:	d11f      	bne.n	8000ba4 <HAL_RCC_ClockConfig+0x120>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8000b64:	6863      	ldr	r3, [r4, #4]
 8000b66:	f003 030c 	and.w	r3, r3, #12
 8000b6a:	2b04      	cmp	r3, #4
 8000b6c:	d099      	beq.n	8000aa2 <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000b6e:	f7ff fb6d 	bl	800024c <HAL_GetTick>
 8000b72:	1bc0      	subs	r0, r0, r7
 8000b74:	4540      	cmp	r0, r8
 8000b76:	d9f5      	bls.n	8000b64 <HAL_RCC_ClockConfig+0xe0>
          return HAL_TIMEOUT;
 8000b78:	2003      	movs	r0, #3
 8000b7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000b7e:	2a02      	cmp	r2, #2
 8000b80:	bf0c      	ite	eq
 8000b82:	f04f 7300 	moveq.w	r3, #33554432	; 0x2000000
 8000b86:	2302      	movne	r3, #2
 8000b88:	fa93 f1a3 	rbit	r1, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000b8c:	6820      	ldr	r0, [r4, #0]
 8000b8e:	fa93 f3a3 	rbit	r3, r3
 8000b92:	fab3 f383 	clz	r3, r3
 8000b96:	f003 031f 	and.w	r3, r3, #31
 8000b9a:	2101      	movs	r1, #1
 8000b9c:	fa01 f303 	lsl.w	r3, r1, r3
 8000ba0:	4203      	tst	r3, r0
 8000ba2:	e7d1      	b.n	8000b48 <HAL_RCC_ClockConfig+0xc4>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000ba4:	2b02      	cmp	r3, #2
 8000ba6:	d110      	bne.n	8000bca <HAL_RCC_ClockConfig+0x146>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000ba8:	6863      	ldr	r3, [r4, #4]
 8000baa:	f003 030c 	and.w	r3, r3, #12
 8000bae:	2b08      	cmp	r3, #8
 8000bb0:	f43f af77 	beq.w	8000aa2 <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000bb4:	f7ff fb4a 	bl	800024c <HAL_GetTick>
 8000bb8:	1bc0      	subs	r0, r0, r7
 8000bba:	4540      	cmp	r0, r8
 8000bbc:	d9f4      	bls.n	8000ba8 <HAL_RCC_ClockConfig+0x124>
 8000bbe:	e7db      	b.n	8000b78 <HAL_RCC_ClockConfig+0xf4>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000bc0:	f7ff fb44 	bl	800024c <HAL_GetTick>
 8000bc4:	1bc0      	subs	r0, r0, r7
 8000bc6:	4540      	cmp	r0, r8
 8000bc8:	d8d6      	bhi.n	8000b78 <HAL_RCC_ClockConfig+0xf4>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8000bca:	6863      	ldr	r3, [r4, #4]
 8000bcc:	f013 0f0c 	tst.w	r3, #12
 8000bd0:	d1f6      	bne.n	8000bc0 <HAL_RCC_ClockConfig+0x13c>
 8000bd2:	e766      	b.n	8000aa2 <HAL_RCC_ClockConfig+0x1e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000bd4:	6813      	ldr	r3, [r2, #0]
 8000bd6:	f023 0307 	bic.w	r3, r3, #7
 8000bda:	432b      	orrs	r3, r5
 8000bdc:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000bde:	6813      	ldr	r3, [r2, #0]
 8000be0:	f003 0307 	and.w	r3, r3, #7
 8000be4:	429d      	cmp	r5, r3
 8000be6:	d192      	bne.n	8000b0e <HAL_RCC_ClockConfig+0x8a>
 8000be8:	e762      	b.n	8000ab0 <HAL_RCC_ClockConfig+0x2c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000bea:	6863      	ldr	r3, [r4, #4]
 8000bec:	68f1      	ldr	r1, [r6, #12]
 8000bee:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000bf2:	430b      	orrs	r3, r1
 8000bf4:	6063      	str	r3, [r4, #4]
 8000bf6:	e761      	b.n	8000abc <HAL_RCC_ClockConfig+0x38>
 8000bf8:	40022000 	.word	0x40022000
 8000bfc:	40021000 	.word	0x40021000
 8000c00:	080011f4 	.word	0x080011f4
 8000c04:	20000008 	.word	0x20000008

08000c08 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8000c08:	4b01      	ldr	r3, [pc, #4]	; (8000c10 <HAL_RCC_GetHCLKFreq+0x8>)
 8000c0a:	6818      	ldr	r0, [r3, #0]
 8000c0c:	4770      	bx	lr
 8000c0e:	bf00      	nop
 8000c10:	20000008 	.word	0x20000008

08000c14 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8000c14:	b570      	push	{r4, r5, r6, lr}
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8000c16:	4604      	mov	r4, r0
 8000c18:	2800      	cmp	r0, #0
 8000c1a:	d04a      	beq.n	8000cb2 <HAL_SPI_Init+0x9e>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	6283      	str	r3, [r0, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8000c20:	f890 305d 	ldrb.w	r3, [r0, #93]	; 0x5d
 8000c24:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000c28:	b91b      	cbnz	r3, 8000c32 <HAL_SPI_Init+0x1e>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8000c2a:	f880 205c 	strb.w	r2, [r0, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8000c2e:	f000 fa01 	bl	8001034 <HAL_SPI_MspInit>
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8000c32:	2302      	movs	r3, #2

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8000c34:	6821      	ldr	r1, [r4, #0]
  hspi->State = HAL_SPI_STATE_BUSY;
 8000c36:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_SPI_DISABLE(hspi);
 8000c3a:	680b      	ldr	r3, [r1, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8000c3c:	68e2      	ldr	r2, [r4, #12]
  __HAL_SPI_DISABLE(hspi);
 8000c3e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8000c42:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
  __HAL_SPI_DISABLE(hspi);
 8000c46:	600b      	str	r3, [r1, #0]
 8000c48:	f04f 0300 	mov.w	r3, #0
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8000c4c:	d92e      	bls.n	8000cac <HAL_SPI_Init+0x98>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8000c4e:	4618      	mov	r0, r3
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8000c50:	f5b2 6f70 	cmp.w	r2, #3840	; 0xf00
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000c54:	bf18      	it	ne
 8000c56:	62a3      	strne	r3, [r4, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8000c58:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000c5a:	b92b      	cbnz	r3, 8000c68 <HAL_SPI_Init+0x54>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8000c5c:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8000c60:	bf8c      	ite	hi
 8000c62:	2302      	movhi	r3, #2
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8000c64:	2301      	movls	r3, #1
 8000c66:	6323      	str	r3, [r4, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8000c68:	68a6      	ldr	r6, [r4, #8]
 8000c6a:	6863      	ldr	r3, [r4, #4]
 8000c6c:	69a5      	ldr	r5, [r4, #24]
 8000c6e:	4333      	orrs	r3, r6
 8000c70:	6926      	ldr	r6, [r4, #16]
 8000c72:	4333      	orrs	r3, r6
 8000c74:	6966      	ldr	r6, [r4, #20]
 8000c76:	4333      	orrs	r3, r6
 8000c78:	69e6      	ldr	r6, [r4, #28]
 8000c7a:	4333      	orrs	r3, r6
 8000c7c:	6a26      	ldr	r6, [r4, #32]
 8000c7e:	4333      	orrs	r3, r6
 8000c80:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8000c82:	4333      	orrs	r3, r6
 8000c84:	f405 7600 	and.w	r6, r5, #512	; 0x200
 8000c88:	4333      	orrs	r3, r6
 8000c8a:	600b      	str	r3, [r1, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo Threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8000c8c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000c8e:	431a      	orrs	r2, r3
 8000c90:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8000c92:	0c2d      	lsrs	r5, r5, #16
 8000c94:	431a      	orrs	r2, r3
 8000c96:	f005 0504 	and.w	r5, r5, #4
 8000c9a:	432a      	orrs	r2, r5
 8000c9c:	4302      	orrs	r2, r0
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
  hspi->State     = HAL_SPI_STATE_READY;
 8000c9e:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8000ca0:	2000      	movs	r0, #0
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8000ca2:	604a      	str	r2, [r1, #4]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8000ca4:	6620      	str	r0, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8000ca6:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d

  return HAL_OK;
 8000caa:	bd70      	pop	{r4, r5, r6, pc}
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8000cac:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8000cb0:	e7d0      	b.n	8000c54 <HAL_SPI_Init+0x40>
    return HAL_ERROR;
 8000cb2:	2001      	movs	r0, #1
}
 8000cb4:	bd70      	pop	{r4, r5, r6, pc}

08000cb6 <HAL_SPI_ErrorCallback>:
 8000cb6:	4770      	bx	lr

08000cb8 <HAL_SPI_IRQHandler>:
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
  uint32_t itsource = hspi->Instance->CR2;
 8000cb8:	6803      	ldr	r3, [r0, #0]
{
 8000cba:	b530      	push	{r4, r5, lr}
  uint32_t itsource = hspi->Instance->CR2;
 8000cbc:	6859      	ldr	r1, [r3, #4]
  uint32_t itflag   = hspi->Instance->SR;
 8000cbe:	689a      	ldr	r2, [r3, #8]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (((itflag & SPI_FLAG_OVR) == RESET) &&
 8000cc0:	f002 0541 	and.w	r5, r2, #65	; 0x41
 8000cc4:	2d01      	cmp	r5, #1
{
 8000cc6:	b085      	sub	sp, #20
 8000cc8:	4604      	mov	r4, r0
  if (((itflag & SPI_FLAG_OVR) == RESET) &&
 8000cca:	d105      	bne.n	8000cd8 <HAL_SPI_IRQHandler+0x20>
      ((itflag & SPI_FLAG_RXNE) != RESET) && ((itsource & SPI_IT_RXNE) != RESET))
 8000ccc:	064d      	lsls	r5, r1, #25
 8000cce:	d503      	bpl.n	8000cd8 <HAL_SPI_IRQHandler+0x20>
  {
    hspi->RxISR(hspi);
 8000cd0:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (((itflag & SPI_FLAG_TXE) != RESET) && ((itsource & SPI_IT_TXE) != RESET))
  {
    hspi->TxISR(hspi);
 8000cd2:	4798      	blx	r3
        HAL_SPI_ErrorCallback(hspi);
      }
    }
    return;
  }
}
 8000cd4:	b005      	add	sp, #20
 8000cd6:	bd30      	pop	{r4, r5, pc}
  if (((itflag & SPI_FLAG_TXE) != RESET) && ((itsource & SPI_IT_TXE) != RESET))
 8000cd8:	0795      	lsls	r5, r2, #30
 8000cda:	d504      	bpl.n	8000ce6 <HAL_SPI_IRQHandler+0x2e>
 8000cdc:	0608      	lsls	r0, r1, #24
 8000cde:	d502      	bpl.n	8000ce6 <HAL_SPI_IRQHandler+0x2e>
    hspi->TxISR(hspi);
 8000ce0:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8000ce2:	4620      	mov	r0, r4
 8000ce4:	e7f5      	b.n	8000cd2 <HAL_SPI_IRQHandler+0x1a>
  if (((itflag & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE)) != RESET) && ((itsource & SPI_IT_ERR) != RESET))
 8000ce6:	f412 7fb0 	tst.w	r2, #352	; 0x160
 8000cea:	d0f3      	beq.n	8000cd4 <HAL_SPI_IRQHandler+0x1c>
 8000cec:	068d      	lsls	r5, r1, #26
 8000cee:	d5f1      	bpl.n	8000cd4 <HAL_SPI_IRQHandler+0x1c>
    if ((itflag & SPI_FLAG_OVR) != RESET)
 8000cf0:	0650      	lsls	r0, r2, #25
 8000cf2:	d50f      	bpl.n	8000d14 <HAL_SPI_IRQHandler+0x5c>
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8000cf4:	f894 005d 	ldrb.w	r0, [r4, #93]	; 0x5d
 8000cf8:	2803      	cmp	r0, #3
 8000cfa:	f04f 0500 	mov.w	r5, #0
 8000cfe:	d041      	beq.n	8000d84 <HAL_SPI_IRQHandler+0xcc>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8000d00:	6e20      	ldr	r0, [r4, #96]	; 0x60
 8000d02:	f040 0004 	orr.w	r0, r0, #4
 8000d06:	6620      	str	r0, [r4, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8000d08:	9500      	str	r5, [sp, #0]
 8000d0a:	68d8      	ldr	r0, [r3, #12]
 8000d0c:	9000      	str	r0, [sp, #0]
 8000d0e:	6898      	ldr	r0, [r3, #8]
 8000d10:	9000      	str	r0, [sp, #0]
 8000d12:	9800      	ldr	r0, [sp, #0]
    if ((itflag & SPI_FLAG_MODF) != RESET)
 8000d14:	0695      	lsls	r5, r2, #26
 8000d16:	d50c      	bpl.n	8000d32 <HAL_SPI_IRQHandler+0x7a>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8000d18:	6e20      	ldr	r0, [r4, #96]	; 0x60
 8000d1a:	f040 0001 	orr.w	r0, r0, #1
 8000d1e:	6620      	str	r0, [r4, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8000d20:	2000      	movs	r0, #0
 8000d22:	9002      	str	r0, [sp, #8]
 8000d24:	6898      	ldr	r0, [r3, #8]
 8000d26:	9002      	str	r0, [sp, #8]
 8000d28:	6818      	ldr	r0, [r3, #0]
 8000d2a:	f020 0040 	bic.w	r0, r0, #64	; 0x40
 8000d2e:	6018      	str	r0, [r3, #0]
 8000d30:	9802      	ldr	r0, [sp, #8]
    if ((itflag & SPI_FLAG_FRE) != RESET)
 8000d32:	05d0      	lsls	r0, r2, #23
 8000d34:	d508      	bpl.n	8000d48 <HAL_SPI_IRQHandler+0x90>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8000d36:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8000d38:	f042 0208 	orr.w	r2, r2, #8
 8000d3c:	6622      	str	r2, [r4, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8000d3e:	2200      	movs	r2, #0
 8000d40:	9203      	str	r2, [sp, #12]
 8000d42:	689a      	ldr	r2, [r3, #8]
 8000d44:	9203      	str	r2, [sp, #12]
 8000d46:	9a03      	ldr	r2, [sp, #12]
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8000d48:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8000d4a:	2a00      	cmp	r2, #0
 8000d4c:	d0c2      	beq.n	8000cd4 <HAL_SPI_IRQHandler+0x1c>
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8000d4e:	685a      	ldr	r2, [r3, #4]
 8000d50:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8000d54:	605a      	str	r2, [r3, #4]
      hspi->State = HAL_SPI_STATE_READY;
 8000d56:	2201      	movs	r2, #1
 8000d58:	f884 205d 	strb.w	r2, [r4, #93]	; 0x5d
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8000d5c:	078a      	lsls	r2, r1, #30
 8000d5e:	d018      	beq.n	8000d92 <HAL_SPI_IRQHandler+0xda>
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8000d60:	685a      	ldr	r2, [r3, #4]
        if (hspi->hdmarx != NULL)
 8000d62:	6da0      	ldr	r0, [r4, #88]	; 0x58
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8000d64:	f022 0203 	bic.w	r2, r2, #3
 8000d68:	605a      	str	r2, [r3, #4]
        if (hspi->hdmarx != NULL)
 8000d6a:	b118      	cbz	r0, 8000d74 <HAL_SPI_IRQHandler+0xbc>
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8000d6c:	4b0b      	ldr	r3, [pc, #44]	; (8000d9c <HAL_SPI_IRQHandler+0xe4>)
 8000d6e:	6343      	str	r3, [r0, #52]	; 0x34
          HAL_DMA_Abort_IT(hspi->hdmarx);
 8000d70:	f7ff faff 	bl	8000372 <HAL_DMA_Abort_IT>
        if (hspi->hdmatx != NULL)
 8000d74:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8000d76:	2800      	cmp	r0, #0
 8000d78:	d0ac      	beq.n	8000cd4 <HAL_SPI_IRQHandler+0x1c>
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8000d7a:	4b08      	ldr	r3, [pc, #32]	; (8000d9c <HAL_SPI_IRQHandler+0xe4>)
 8000d7c:	6343      	str	r3, [r0, #52]	; 0x34
          HAL_DMA_Abort_IT(hspi->hdmatx);
 8000d7e:	f7ff faf8 	bl	8000372 <HAL_DMA_Abort_IT>
 8000d82:	e7a7      	b.n	8000cd4 <HAL_SPI_IRQHandler+0x1c>
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8000d84:	9501      	str	r5, [sp, #4]
 8000d86:	68da      	ldr	r2, [r3, #12]
 8000d88:	9201      	str	r2, [sp, #4]
 8000d8a:	689b      	ldr	r3, [r3, #8]
 8000d8c:	9301      	str	r3, [sp, #4]
 8000d8e:	9b01      	ldr	r3, [sp, #4]
        return;
 8000d90:	e7a0      	b.n	8000cd4 <HAL_SPI_IRQHandler+0x1c>
        HAL_SPI_ErrorCallback(hspi);
 8000d92:	4620      	mov	r0, r4
 8000d94:	f7ff ff8f 	bl	8000cb6 <HAL_SPI_ErrorCallback>
 8000d98:	e79c      	b.n	8000cd4 <HAL_SPI_IRQHandler+0x1c>
 8000d9a:	bf00      	nop
 8000d9c:	08000da1 	.word	0x08000da1

08000da0 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8000da0:	b508      	push	{r3, lr}
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8000da2:	6a40      	ldr	r0, [r0, #36]	; 0x24
  hspi->RxXferCount = 0U;
 8000da4:	2300      	movs	r3, #0
 8000da6:	f8a0 3046 	strh.w	r3, [r0, #70]	; 0x46
  hspi->TxXferCount = 0U;
 8000daa:	87c3      	strh	r3, [r0, #62]	; 0x3e

  HAL_SPI_ErrorCallback(hspi);
 8000dac:	f7ff ff83 	bl	8000cb6 <HAL_SPI_ErrorCallback>
 8000db0:	bd08      	pop	{r3, pc}
	...

08000db4 <Takt>:
static void MX_SPI1_Init(void);

/* USER CODE BEGIN PFP */
/* Private function prototypes -----------------------------------------------*/
void Takt(void)
{
 8000db4:	b510      	push	{r4, lr}
	LCM_OUT0 &= ~LCM_E;
 8000db6:	4c0c      	ldr	r4, [pc, #48]	; (8000de8 <Takt+0x34>)
 8000db8:	6963      	ldr	r3, [r4, #20]
 8000dba:	f023 0304 	bic.w	r3, r3, #4
 8000dbe:	6163      	str	r3, [r4, #20]
	HAL_Delay(10);
 8000dc0:	200a      	movs	r0, #10
 8000dc2:	f7ff fa49 	bl	8000258 <HAL_Delay>
	LCM_OUT0 |= LCM_E;
 8000dc6:	6963      	ldr	r3, [r4, #20]
 8000dc8:	f043 0304 	orr.w	r3, r3, #4
 8000dcc:	6163      	str	r3, [r4, #20]
	HAL_Delay(10);
 8000dce:	200a      	movs	r0, #10
 8000dd0:	f7ff fa42 	bl	8000258 <HAL_Delay>
	LCM_OUT0 &= (~LCM_E);
 8000dd4:	6963      	ldr	r3, [r4, #20]
 8000dd6:	f023 0304 	bic.w	r3, r3, #4
 8000dda:	6163      	str	r3, [r4, #20]
	HAL_Delay(45);
 8000ddc:	202d      	movs	r0, #45	; 0x2d
}
 8000dde:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	HAL_Delay(45);
 8000de2:	f7ff ba39 	b.w	8000258 <HAL_Delay>
 8000de6:	bf00      	nop
 8000de8:	48000800 	.word	0x48000800

08000dec <Write_DC>:

void Write_DC(char data, int rs)
{
 8000dec:	4b05      	ldr	r3, [pc, #20]	; (8000e04 <Write_DC+0x18>)
	if(rs==1) {
 8000dee:	2901      	cmp	r1, #1
		LCM_OUT0=LCM_RS;
	}
	else {
		LCM_OUT0 &= ~LCM_RS;
 8000df0:	bf17      	itett	ne
 8000df2:	695a      	ldrne	r2, [r3, #20]
		LCM_OUT0=LCM_RS;
 8000df4:	6159      	streq	r1, [r3, #20]
		LCM_OUT0 &= ~LCM_RS;
 8000df6:	f022 0201 	bicne.w	r2, r2, #1
 8000dfa:	615a      	strne	r2, [r3, #20]
	}

	LCM_OUT1 = data;
 8000dfc:	4b02      	ldr	r3, [pc, #8]	; (8000e08 <Write_DC+0x1c>)
 8000dfe:	6158      	str	r0, [r3, #20]
	Takt();
 8000e00:	f7ff bfd8 	b.w	8000db4 <Takt>
 8000e04:	48000800 	.word	0x48000800
 8000e08:	48000400 	.word	0x48000400

08000e0c <InitializeLCD>:
  Cursor (0x06, 1);
}

void InitializeLCD(void)
{
    LCM_OUT1 &= ~(LCM_MASK);
 8000e0c:	4a16      	ldr	r2, [pc, #88]	; (8000e68 <InitializeLCD+0x5c>)
{
 8000e0e:	b508      	push	{r3, lr}
    LCM_OUT1 &= ~(LCM_MASK);
 8000e10:	6953      	ldr	r3, [r2, #20]
 8000e12:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8000e16:	6153      	str	r3, [r2, #20]
    HAL_Delay(100);
 8000e18:	2064      	movs	r0, #100	; 0x64
 8000e1a:	f7ff fa1d 	bl	8000258 <HAL_Delay>
    LCM_OUT0 &= ~LCM_RS;
 8000e1e:	4b13      	ldr	r3, [pc, #76]	; (8000e6c <InitializeLCD+0x60>)
 8000e20:	695a      	ldr	r2, [r3, #20]
 8000e22:	f022 0201 	bic.w	r2, r2, #1
 8000e26:	615a      	str	r2, [r3, #20]
    LCM_OUT0 &= ~LCM_RW;
 8000e28:	695a      	ldr	r2, [r3, #20]
 8000e2a:	f022 0202 	bic.w	r2, r2, #2
 8000e2e:	615a      	str	r2, [r3, #20]
    LCM_OUT0 &= ~LCM_E;
 8000e30:	695a      	ldr	r2, [r3, #20]
 8000e32:	f022 0204 	bic.w	r2, r2, #4
 8000e36:	615a      	str	r2, [r3, #20]

    Takt();
 8000e38:	f7ff ffbc 	bl	8000db4 <Takt>
    Write_DC(0x3C, 0);
 8000e3c:	2100      	movs	r1, #0
 8000e3e:	203c      	movs	r0, #60	; 0x3c
 8000e40:	f7ff ffd4 	bl	8000dec <Write_DC>
    Write_DC(0x3C, 0);
 8000e44:	2100      	movs	r1, #0
 8000e46:	203c      	movs	r0, #60	; 0x3c
 8000e48:	f7ff ffd0 	bl	8000dec <Write_DC>
    Write_DC(0x0F, 0);
 8000e4c:	2100      	movs	r1, #0
 8000e4e:	200f      	movs	r0, #15
 8000e50:	f7ff ffcc 	bl	8000dec <Write_DC>
    Write_DC(0x01, 0);
 8000e54:	2100      	movs	r1, #0
 8000e56:	2001      	movs	r0, #1
 8000e58:	f7ff ffc8 	bl	8000dec <Write_DC>
    Write_DC(0x06, 0);
 8000e5c:	2100      	movs	r1, #0
 8000e5e:	2006      	movs	r0, #6
}
 8000e60:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Write_DC(0x06, 0);
 8000e64:	f7ff bfc2 	b.w	8000dec <Write_DC>
 8000e68:	48000400 	.word	0x48000400
 8000e6c:	48000800 	.word	0x48000800

08000e70 <SystemClock_Config>:
}

/** System Clock Configuration
*/
void SystemClock_Config(void)
{
 8000e70:	b510      	push	{r4, lr}
 8000e72:	b090      	sub	sp, #64	; 0x40
  RCC_ClkInitTypeDef RCC_ClkInitStruct;

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e74:	2301      	movs	r3, #1
 8000e76:	930a      	str	r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = 16;
 8000e78:	2310      	movs	r3, #16
 8000e7a:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000e7c:	2300      	movs	r3, #0
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000e7e:	2402      	movs	r4, #2
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000e80:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e82:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000e84:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000e88:	9406      	str	r4, [sp, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e8a:	940d      	str	r4, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000e8c:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e8e:	f7ff fb55 	bl	800053c <HAL_RCC_OscConfig>
 8000e92:	b100      	cbz	r0, 8000e96 <SystemClock_Config+0x26>
 8000e94:	e7fe      	b.n	8000e94 <SystemClock_Config+0x24>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e96:	230f      	movs	r3, #15
 8000e98:	9301      	str	r3, [sp, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e9a:	9003      	str	r0, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000e9c:	f44f 6380 	mov.w	r3, #1024	; 0x400
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ea0:	9005      	str	r0, [sp, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000ea2:	4621      	mov	r1, r4
 8000ea4:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ea6:	9402      	str	r4, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000ea8:	9304      	str	r3, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000eaa:	f7ff fdeb 	bl	8000a84 <HAL_RCC_ClockConfig>
 8000eae:	4604      	mov	r4, r0
 8000eb0:	b100      	cbz	r0, 8000eb4 <SystemClock_Config+0x44>
 8000eb2:	e7fe      	b.n	8000eb2 <SystemClock_Config+0x42>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8000eb4:	f7ff fea8 	bl	8000c08 <HAL_RCC_GetHCLKFreq>
 8000eb8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ebc:	fbb0 f0f3 	udiv	r0, r0, r3
 8000ec0:	f7ff fa30 	bl	8000324 <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8000ec4:	2004      	movs	r0, #4
 8000ec6:	f7ff fa43 	bl	8000350 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8000eca:	4622      	mov	r2, r4
 8000ecc:	4621      	mov	r1, r4
 8000ece:	f04f 30ff 	mov.w	r0, #4294967295
 8000ed2:	f7ff f9e7 	bl	80002a4 <HAL_NVIC_SetPriority>
}
 8000ed6:	b010      	add	sp, #64	; 0x40
 8000ed8:	bd10      	pop	{r4, pc}
	...

08000edc <main>:
{
 8000edc:	b500      	push	{lr}
 8000ede:	b089      	sub	sp, #36	; 0x24
  HAL_Init();
 8000ee0:	f7ff f996 	bl	8000210 <HAL_Init>
  SystemClock_Config();
 8000ee4:	f7ff ffc4 	bl	8000e70 <SystemClock_Config>
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ee8:	4b2e      	ldr	r3, [pc, #184]	; (8000fa4 <main+0xc8>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3, GPIO_PIN_RESET);
 8000eea:	482f      	ldr	r0, [pc, #188]	; (8000fa8 <main+0xcc>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000eec:	695a      	ldr	r2, [r3, #20]
 8000eee:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8000ef2:	615a      	str	r2, [r3, #20]
 8000ef4:	695a      	ldr	r2, [r3, #20]
 8000ef6:	f402 2200 	and.w	r2, r2, #524288	; 0x80000
 8000efa:	9200      	str	r2, [sp, #0]
 8000efc:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000efe:	695a      	ldr	r2, [r3, #20]
 8000f00:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8000f04:	615a      	str	r2, [r3, #20]
 8000f06:	695a      	ldr	r2, [r3, #20]
 8000f08:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8000f0c:	9201      	str	r2, [sp, #4]
 8000f0e:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f10:	695a      	ldr	r2, [r3, #20]
 8000f12:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8000f16:	615a      	str	r2, [r3, #20]
 8000f18:	695b      	ldr	r3, [r3, #20]
 8000f1a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000f1e:	9302      	str	r3, [sp, #8]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3, GPIO_PIN_RESET);
 8000f20:	2200      	movs	r2, #0
 8000f22:	210f      	movs	r1, #15
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f24:	9b02      	ldr	r3, [sp, #8]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3, GPIO_PIN_RESET);
 8000f26:	f7ff fb03 	bl	8000530 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	21ff      	movs	r1, #255	; 0xff
 8000f2e:	481f      	ldr	r0, [pc, #124]	; (8000fac <main+0xd0>)
 8000f30:	f7ff fafe 	bl	8000530 <HAL_GPIO_WritePin>
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pins : PC0 PC1 PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f34:	2400      	movs	r4, #0
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8000f36:	230f      	movs	r3, #15
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f38:	2501      	movs	r5, #1
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f3a:	a903      	add	r1, sp, #12
 8000f3c:	481a      	ldr	r0, [pc, #104]	; (8000fa8 <main+0xcc>)
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8000f3e:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f40:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f42:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f44:	9504      	str	r5, [sp, #16]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f46:	f7ff fa39 	bl	80003bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB3 
                           PB4 PB5 PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
 8000f4a:	23ff      	movs	r3, #255	; 0xff
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f4c:	a903      	add	r1, sp, #12
 8000f4e:	4817      	ldr	r0, [pc, #92]	; (8000fac <main+0xd0>)
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
 8000f50:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f52:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f54:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f56:	9504      	str	r5, [sp, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f58:	f7ff fa30 	bl	80003bc <HAL_GPIO_Init>
  hspi1.Instance = SPI1;
 8000f5c:	4814      	ldr	r0, [pc, #80]	; (8000fb0 <main+0xd4>)
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000f5e:	4915      	ldr	r1, [pc, #84]	; (8000fb4 <main+0xd8>)
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000f60:	6104      	str	r4, [r0, #16]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000f62:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000f66:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f6a:	f44f 6ee0 	mov.w	lr, #1792	; 0x700
 8000f6e:	e880 400e 	stmia.w	r0, {r1, r2, r3, lr}
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000f72:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000f76:	6183      	str	r3, [r0, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8000f78:	2328      	movs	r3, #40	; 0x28
 8000f7a:	61c3      	str	r3, [r0, #28]
  hspi1.Init.CRCPolynomial = 7;
 8000f7c:	2307      	movs	r3, #7
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000f7e:	6204      	str	r4, [r0, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000f80:	6244      	str	r4, [r0, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000f82:	6284      	str	r4, [r0, #40]	; 0x28
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000f84:	6304      	str	r4, [r0, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000f86:	6344      	str	r4, [r0, #52]	; 0x34
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000f88:	6145      	str	r5, [r0, #20]
  hspi1.Init.CRCPolynomial = 7;
 8000f8a:	62c3      	str	r3, [r0, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000f8c:	f7ff fe42 	bl	8000c14 <HAL_SPI_Init>
 8000f90:	4604      	mov	r4, r0
 8000f92:	b100      	cbz	r0, 8000f96 <main+0xba>
 8000f94:	e7fe      	b.n	8000f94 <main+0xb8>
  InitializeLCD();
 8000f96:	f7ff ff39 	bl	8000e0c <InitializeLCD>
  Write_DC(0x01, 0);
 8000f9a:	4621      	mov	r1, r4
 8000f9c:	4628      	mov	r0, r5
 8000f9e:	f7ff ff25 	bl	8000dec <Write_DC>
 8000fa2:	e7fe      	b.n	8000fa2 <main+0xc6>
 8000fa4:	40021000 	.word	0x40021000
 8000fa8:	48000800 	.word	0x48000800
 8000fac:	48000400 	.word	0x48000400
 8000fb0:	20000034 	.word	0x20000034
 8000fb4:	40013000 	.word	0x40013000

08000fb8 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fb8:	4b1d      	ldr	r3, [pc, #116]	; (8001030 <HAL_MspInit+0x78>)
{
 8000fba:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fbc:	699a      	ldr	r2, [r3, #24]
 8000fbe:	f042 0201 	orr.w	r2, r2, #1
 8000fc2:	619a      	str	r2, [r3, #24]
 8000fc4:	699b      	ldr	r3, [r3, #24]
 8000fc6:	f003 0301 	and.w	r3, r3, #1
 8000fca:	9301      	str	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fcc:	2003      	movs	r0, #3
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fce:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fd0:	f7ff f956 	bl	8000280 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	4611      	mov	r1, r2
 8000fd8:	f06f 000b 	mvn.w	r0, #11
 8000fdc:	f7ff f962 	bl	80002a4 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	4611      	mov	r1, r2
 8000fe4:	f06f 000a 	mvn.w	r0, #10
 8000fe8:	f7ff f95c 	bl	80002a4 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8000fec:	2200      	movs	r2, #0
 8000fee:	4611      	mov	r1, r2
 8000ff0:	f06f 0009 	mvn.w	r0, #9
 8000ff4:	f7ff f956 	bl	80002a4 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	4611      	mov	r1, r2
 8000ffc:	f06f 0004 	mvn.w	r0, #4
 8001000:	f7ff f950 	bl	80002a4 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8001004:	2200      	movs	r2, #0
 8001006:	4611      	mov	r1, r2
 8001008:	f06f 0003 	mvn.w	r0, #3
 800100c:	f7ff f94a 	bl	80002a4 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8001010:	2200      	movs	r2, #0
 8001012:	4611      	mov	r1, r2
 8001014:	f06f 0001 	mvn.w	r0, #1
 8001018:	f7ff f944 	bl	80002a4 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 800101c:	2200      	movs	r2, #0
 800101e:	4611      	mov	r1, r2
 8001020:	f04f 30ff 	mov.w	r0, #4294967295
 8001024:	f7ff f93e 	bl	80002a4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001028:	b003      	add	sp, #12
 800102a:	f85d fb04 	ldr.w	pc, [sp], #4
 800102e:	bf00      	nop
 8001030:	40021000 	.word	0x40021000

08001034 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001034:	b510      	push	{r4, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hspi->Instance==SPI1)
 8001036:	6802      	ldr	r2, [r0, #0]
 8001038:	4b13      	ldr	r3, [pc, #76]	; (8001088 <HAL_SPI_MspInit+0x54>)
 800103a:	429a      	cmp	r2, r3
{
 800103c:	b086      	sub	sp, #24
  if(hspi->Instance==SPI1)
 800103e:	d121      	bne.n	8001084 <HAL_SPI_MspInit+0x50>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001040:	f503 4360 	add.w	r3, r3, #57344	; 0xe000
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001044:	2400      	movs	r4, #0
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001046:	699a      	ldr	r2, [r3, #24]
 8001048:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800104c:	619a      	str	r2, [r3, #24]
 800104e:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001050:	9403      	str	r4, [sp, #12]
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001052:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001056:	9300      	str	r3, [sp, #0]
 8001058:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 800105a:	2360      	movs	r3, #96	; 0x60
 800105c:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800105e:	2302      	movs	r3, #2
 8001060:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001062:	2303      	movs	r3, #3
 8001064:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001066:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001068:	2305      	movs	r3, #5
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800106a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800106e:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001070:	f7ff f9a4 	bl	80003bc <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8001074:	2023      	movs	r0, #35	; 0x23
 8001076:	4622      	mov	r2, r4
 8001078:	4621      	mov	r1, r4
 800107a:	f7ff f913 	bl	80002a4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 800107e:	2023      	movs	r0, #35	; 0x23
 8001080:	f7ff f944 	bl	800030c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001084:	b006      	add	sp, #24
 8001086:	bd10      	pop	{r4, pc}
 8001088:	40013000 	.word	0x40013000

0800108c <NMI_Handler>:
 800108c:	4770      	bx	lr

0800108e <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 800108e:	e7fe      	b.n	800108e <HardFault_Handler>

08001090 <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 8001090:	e7fe      	b.n	8001090 <MemManage_Handler>

08001092 <BusFault_Handler>:

/**
* @brief This function handles Pre-fetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 8001092:	e7fe      	b.n	8001092 <BusFault_Handler>

08001094 <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 8001094:	e7fe      	b.n	8001094 <UsageFault_Handler>

08001096 <SVC_Handler>:
 8001096:	4770      	bx	lr

08001098 <DebugMon_Handler>:
 8001098:	4770      	bx	lr

0800109a <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 800109a:	4770      	bx	lr

0800109c <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 800109c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800109e:	f7ff f8c9 	bl	8000234 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010a2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_SYSTICK_IRQHandler();
 80010a6:	f7ff b960 	b.w	800036a <HAL_SYSTICK_IRQHandler>
	...

080010ac <SPI1_IRQHandler>:
void SPI1_IRQHandler(void)
{
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 80010ac:	4801      	ldr	r0, [pc, #4]	; (80010b4 <SPI1_IRQHandler+0x8>)
 80010ae:	f7ff be03 	b.w	8000cb8 <HAL_SPI_IRQHandler>
 80010b2:	bf00      	nop
 80010b4:	20000034 	.word	0x20000034

080010b8 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80010b8:	4915      	ldr	r1, [pc, #84]	; (8001110 <SystemInit+0x58>)
 80010ba:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 80010be:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80010c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 80010c6:	4b13      	ldr	r3, [pc, #76]	; (8001114 <SystemInit+0x5c>)
 80010c8:	681a      	ldr	r2, [r3, #0]
 80010ca:	f042 0201 	orr.w	r2, r2, #1
 80010ce:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00CU;
 80010d0:	6858      	ldr	r0, [r3, #4]
 80010d2:	4a11      	ldr	r2, [pc, #68]	; (8001118 <SystemInit+0x60>)
 80010d4:	4002      	ands	r2, r0
 80010d6:	605a      	str	r2, [r3, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 80010d8:	681a      	ldr	r2, [r3, #0]
 80010da:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 80010de:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80010e2:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80010e4:	681a      	ldr	r2, [r3, #0]
 80010e6:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80010ea:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 80010ec:	685a      	ldr	r2, [r3, #4]
 80010ee:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 80010f2:	605a      	str	r2, [r3, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= 0xFFFFFFF0U;
 80010f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80010f6:	f022 020f 	bic.w	r2, r2, #15
 80010fa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= 0xFF00FCCCU;
 80010fc:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80010fe:	4a07      	ldr	r2, [pc, #28]	; (800111c <SystemInit+0x64>)
 8001100:	4002      	ands	r2, r0
 8001102:	631a      	str	r2, [r3, #48]	; 0x30

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 8001104:	2200      	movs	r2, #0
 8001106:	609a      	str	r2, [r3, #8]

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001108:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800110c:	608b      	str	r3, [r1, #8]
 800110e:	4770      	bx	lr
 8001110:	e000ed00 	.word	0xe000ed00
 8001114:	40021000 	.word	0x40021000
 8001118:	f87fc00c 	.word	0xf87fc00c
 800111c:	ff00fccc 	.word	0xff00fccc

08001120 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001120:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001158 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001124:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001126:	e003      	b.n	8001130 <LoopCopyDataInit>

08001128 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001128:	4b0c      	ldr	r3, [pc, #48]	; (800115c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800112a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 800112c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800112e:	3104      	adds	r1, #4

08001130 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001130:	480b      	ldr	r0, [pc, #44]	; (8001160 <LoopForever+0xa>)
	ldr	r3, =_edata
 8001132:	4b0c      	ldr	r3, [pc, #48]	; (8001164 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001134:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001136:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001138:	d3f6      	bcc.n	8001128 <CopyDataInit>
	ldr	r2, =_sbss
 800113a:	4a0b      	ldr	r2, [pc, #44]	; (8001168 <LoopForever+0x12>)
	b	LoopFillZerobss
 800113c:	e002      	b.n	8001144 <LoopFillZerobss>

0800113e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800113e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001140:	f842 3b04 	str.w	r3, [r2], #4

08001144 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001144:	4b09      	ldr	r3, [pc, #36]	; (800116c <LoopForever+0x16>)
	cmp	r2, r3
 8001146:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001148:	d3f9      	bcc.n	800113e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800114a:	f7ff ffb5 	bl	80010b8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800114e:	f000 f811 	bl	8001174 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001152:	f7ff fec3 	bl	8000edc <main>

08001156 <LoopForever>:

LoopForever:
    b LoopForever
 8001156:	e7fe      	b.n	8001156 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001158:	20003000 	.word	0x20003000
	ldr	r3, =_sidata
 800115c:	0800120c 	.word	0x0800120c
	ldr	r0, =_sdata
 8001160:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001164:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 8001168:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 800116c:	2000009c 	.word	0x2000009c

08001170 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001170:	e7fe      	b.n	8001170 <ADC1_2_IRQHandler>
	...

08001174 <__libc_init_array>:
 8001174:	b570      	push	{r4, r5, r6, lr}
 8001176:	4e0d      	ldr	r6, [pc, #52]	; (80011ac <__libc_init_array+0x38>)
 8001178:	4c0d      	ldr	r4, [pc, #52]	; (80011b0 <__libc_init_array+0x3c>)
 800117a:	1ba4      	subs	r4, r4, r6
 800117c:	10a4      	asrs	r4, r4, #2
 800117e:	2500      	movs	r5, #0
 8001180:	42a5      	cmp	r5, r4
 8001182:	d109      	bne.n	8001198 <__libc_init_array+0x24>
 8001184:	4e0b      	ldr	r6, [pc, #44]	; (80011b4 <__libc_init_array+0x40>)
 8001186:	4c0c      	ldr	r4, [pc, #48]	; (80011b8 <__libc_init_array+0x44>)
 8001188:	f000 f818 	bl	80011bc <_init>
 800118c:	1ba4      	subs	r4, r4, r6
 800118e:	10a4      	asrs	r4, r4, #2
 8001190:	2500      	movs	r5, #0
 8001192:	42a5      	cmp	r5, r4
 8001194:	d105      	bne.n	80011a2 <__libc_init_array+0x2e>
 8001196:	bd70      	pop	{r4, r5, r6, pc}
 8001198:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800119c:	4798      	blx	r3
 800119e:	3501      	adds	r5, #1
 80011a0:	e7ee      	b.n	8001180 <__libc_init_array+0xc>
 80011a2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80011a6:	4798      	blx	r3
 80011a8:	3501      	adds	r5, #1
 80011aa:	e7f2      	b.n	8001192 <__libc_init_array+0x1e>
 80011ac:	08001204 	.word	0x08001204
 80011b0:	08001204 	.word	0x08001204
 80011b4:	08001204 	.word	0x08001204
 80011b8:	08001208 	.word	0x08001208

080011bc <_init>:
 80011bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80011be:	bf00      	nop
 80011c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80011c2:	bc08      	pop	{r3}
 80011c4:	469e      	mov	lr, r3
 80011c6:	4770      	bx	lr

080011c8 <_fini>:
 80011c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80011ca:	bf00      	nop
 80011cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80011ce:	bc08      	pop	{r3}
 80011d0:	469e      	mov	lr, r3
 80011d2:	4770      	bx	lr
